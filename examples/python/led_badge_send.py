#! /usr/bin/python3
# -*- encoding: utf-8 -*-

from __future__ import print_function
from datetime import datetime
from array import array

import sys, os, re, time, argparse, uuid
import Adafruit_BluefruitLE

__version = "0.9"

CHARACTERISTIC_SERVICE_UUID = uuid.UUID('0000fee0-0000-1000-8000-00805f9b34fb')
CHARACTERISTIC_DATA_UUID = uuid.UUID('0000fee1-0000-1000-8000-00805f9b34fb')

font_11x44 = (
  # 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00,
  0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0xfc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00,
  0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00,
  0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0xc0, 0xc0, 0xce, 0xc6, 0xc6, 0x7e, 0x00,
  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00,
  0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
  0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
  0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00,
  0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
  0x00, 0x82, 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00,
  0x00, 0x86, 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x06,
  0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00,
  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x82, 0x00,
  0x00, 0xc6, 0xc6, 0x6c, 0x7c, 0x38, 0x7c, 0x6c, 0xc6, 0xc6, 0x00,
  0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00,
  0x00, 0xfe, 0xc6, 0x86, 0x0c, 0x18, 0x30, 0x62, 0xc6, 0xfe, 0x00,
  # 'abcdefghijklmnopqrstuvwxyz'
  0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
  0x00, 0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00,
  0x00, 0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
  0x00, 0x1c, 0x36, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78,
  0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00,
  0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
  0x0c, 0x0c, 0x00, 0x1c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
  0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0xe6, 0x00,
  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e,
  0x00, 0x00, 0x00, 0x00, 0xde, 0x76, 0x60, 0x60, 0x60, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00,
  0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x34, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x8c, 0x18, 0x30, 0x62, 0xfe, 0x00,
  # '0987654321^ !"\0$%&/()=?` °\\}][{'
  0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0xc6, 0x7c, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00,
  0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
  0x00, 0xfe, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00,
  0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
  0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00,
  0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00,
  0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x3c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00,
  0x66, 0x66, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0x04, 0x14, 0x18, 0x10, 0x10, 0x20,
  0x10, 0x7c, 0xd6, 0xd6, 0x70, 0x1c, 0xd6, 0xd6, 0x7c, 0x10, 0x10,
  0x00, 0x60, 0x92, 0x96, 0x6c, 0x10, 0x6c, 0xd2, 0x92, 0x0c, 0x00,
  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00,
  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
  0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
  0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00,
  0x18, 0x18, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c,
  0x00, 0x10, 0x28, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00, 0x00,
  0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00,
  0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00,
  0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00,
  0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00,
  # "@ ~ |<>,;.:-_#'+* "
  0x00, 0x00, 0x3c, 0x42, 0x9d, 0xa5, 0xad, 0xb6, 0x40, 0x3c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x08, 0x7c, 0x08, 0x08, 0x18, 0x18, 0x28, 0x28, 0x48, 0x18,
  0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
  0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00,
  0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x10, 0x20,
  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x08, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00,
  0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
)

charmap = u'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + \
          u'abcdefghijklmnopqrstuvwxyz' + \
          u'0987654321^ !"\0$%&/()=?` °\\}][{' + \
          u"@ ~ |<>,;.:-_#'+* "

char_offset = {}
for i in range(len(charmap)):
  char_offset[charmap[i]] = 11 * i
  # print(i, charmap[i], char_offset[charmap[i]])

bitmap_preloaded = [ ([],0) ]
bitmaps_preloaded_unused = False

def bitmap_char(ch):
  if ord(ch) < 32:
    if ch in bitmap_builtin:
      return bitmap_builtin[ch][:2]

    global bitmaps_preloaded_unused
    bitmaps_preloaded_unused = False
    return bitmap_preloaded[ord(ch)]

  o = char_offset[ch]
  return (font_11x44[o:o+11],1)

def bitmap_text(text):
  def colonrepl(m):
    name = m.group(1)
    if name == '':
       return ':'
    if re.match('^[0-9]*$', name):
      return chr(int(name))
    if '.' in name:
      bitmap_preloaded.append(bitmap_img(name))
      return chr(len(bitmap_preloaded)-1)
    b = bitmap_named[name]
    return b[2]

  text = re.sub(r':([^:]*):', colonrepl, text)
  buf = array('B')
  cols = 0
  for c in text:
    (b,n) = bitmap_char(c)
    buf.extend(b)
    cols += n
  return (buf, cols)

def bitmap_img(file):
  from PIL import Image

  im = Image.open(file)
  print("fetching bitmap from file %s -> (%d x %d)" % (file, im.width, im.height))
  if im.height != 11:
    sys.exit("%s: image height must be 11px. Seen %d" % (file, im.height))
  buf = array('B')
  cols = int((im.width+7)/8)
  for col in range(cols):
    for row in range(11):       # [0..10]
      byte_val = 0
      for bit in range(8):      # [0..7]
        bit_val = 0
        x = 8*col+bit
        if x < im.width:
          pixel_color = im.getpixel( (x, row) )
          if isinstance(pixel_color, tuple):
            monochrome_color = sum(pixel_color[:3]) / len(pixel_color[:3])
          elif isinstance(pixel_color, int):
            monochrome_color = pixel_color
          else:
            sys.exit("%s: Unknown pixel format detected (%s)!" % (file, pixel_color))
          if monochrome_color > 127:
            bit_val = 1 << (7-bit)
          byte_val += bit_val
      buf.append(byte_val)
  im.close()
  return (buf, cols)

def bitmap(arg):
  if os.path.exists(arg):
    return bitmap_img(arg)
  return bitmap_text(arg)

proto_header = (
  0x77, 0x61, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
)

def header(lengths, speeds, modes, blink, ants, brightness=100):
  a = [int(x) for x in re.split(r'[\s,]+', ants)]
  a = a + [a[-1]]*(8-len(a))    # repeat last element
  b = [int(x) for x in re.split(r'[\s,]+', blink)]
  b = b + [b[-1]]*(8-len(b))    # repeat last element
  s = [int(x)-1 for x in re.split(r'[\s,]+', speeds)]
  s = s + [s[-1]]*(8-len(s))    # repeat last element
  m = [int(x) for x in re.split(r'[\s,]+', modes)]
  m = m + [m[-1]]*(8-len(m))    # repeat last element
  h = list(proto_header)

  if brightness <= 25:
    h[5] = 0x40
  elif brightness <= 50:
    h[5] = 0x20
  elif brightness <= 75:
    h[5] = 0x10

  for i in range(8):
    h[6] += b[i]<<i
    h[7] += a[i]<<i

  for i in range(8):
    h[8+i] = 16*s[i] + m[i]

  for i in range(len(lengths)):
    h[17+(2*i)-1] = lengths[i] // 256
    h[17+(2*i)]   = lengths[i] % 256

  cdate = datetime.now()
  h[38+0] = cdate.year % 100
  h[38+1] = cdate.month
  h[38+2] = cdate.day
  h[38+3] = cdate.hour
  h[38+4] = cdate.minute
  h[38+5] = cdate.second
  
  return h

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description='Upload message or image file to LED badge via BLE.\nVersion %s' % __version, epilog='Example text:\n python3 %s message\nExample image:\n python3 %s file.img' % (sys.argv[0], sys.argv[0]))
parser.add_argument('-s', '--speed', default='4', help="Scroll speed (Range 1 - 8)")
parser.add_argument('-B', '--brightness', default='100', help="Brightness for the display in percent: 25, 50, 75, or 100")
parser.add_argument('-m', '--mode',  default='0', help="Up to 8 mode values: Scroll-left(0) -right(1) -up(2) -down(3) still-centered(4) animation(5) drop-down(6) curtain(7) laser(8)")
parser.add_argument('-b', '--blink', default='0', help="1: blinking, 0: normal")
parser.add_argument('-a', '--ants',  default='0', help="1: animated border, 0: normal")
parser.add_argument('-p', '--preload',  metavar='FILE', action='append', help=argparse.SUPPRESS)
parser.add_argument('message', metavar='MESSAGE', nargs='+', help="text message")
parser.add_argument('--mode-help', action='version', help=argparse.SUPPRESS, version="Example: python3 %s message" % sys.argv[0])

args = parser.parse_args()

if args.preload:
  for file in args.preload:
    bitmap_preloaded.append(bitmap_img(file))
    bitmaps_preloaded_unused = True

msgs = []
for arg in args.message:
  msgs.append(bitmap(arg))

if bitmaps_preloaded_unused == True:
  print("\nWARNING:\n Your preloaded images are not used.\n")

buf = array('B')
buf.extend(header(list(map(lambda x: x[1], msgs)), args.speed, args.mode, args.blink, args.ants, int(args.brightness)))

for msg in msgs:
  buf.extend(msg[0])

needpadding = len(buf)%16                 # needs padding: USBHID(64), BLE(16)
if needpadding:
  buf.extend( (0,) * (16-needpadding) )   # needs padding: USBHID(64), BLE(16)

#print(buf)    # DEBUG: array('B', [119, 97, 110, 103, 0, 0, 0, 0, 48, 48, 48, 48, 48, 48, 48, 48, 0, 1, 0, 0, 0, 0, 0, 0, 0])

if len(buf) > 8192:
  print ("Writing more than 8192 bytes damages the display!")
  sys.exit(1)


# BLE
provider = Adafruit_BluefruitLE.get_provider()

def main():
    provider.clear_cached_data()
    adapter = provider.get_default_adapter()
    if not adapter.is_powered:
        adapter.power_on()
    print('Searching for device...')
    try:
        adapter.start_scan()
        device = provider.find_device(service_uuids=[CHARACTERISTIC_SERVICE_UUID])
        if device is None:
            raise RuntimeError('Failed to find device!')
        else:
            print(device)
            print('device: {0}'.format(device.name))
            print('id: {0}'.format(device.id))
    finally:
        adapter.stop_scan()
    print('Connecting to device...')
    device.connect()
    try:
        print('Discovering services...')
        device.discover([CHARACTERISTIC_SERVICE_UUID], [CHARACTERISTIC_DATA_UUID])
        service = device.find_service(CHARACTERISTIC_SERVICE_UUID)
        print('service uuid: {0}'.format(service.uuid))
        data = service.find_characteristic(CHARACTERISTIC_DATA_UUID)
        print('characteristic uuid: {0}'.format(data.uuid))

        print('Writing Data..')
        for i in range(int(len(buf)/16)):         # USBHID(64), BLE(16)
          data.write_value(buf[i*16:i*16+16])     # USBHID(64), BLE(16)
          time.sleep(0.1)

        time.sleep(3)
        print('Writing done.')
    finally:
        if device.is_connected:
            device.disconnect()

provider.initialize()
provider.run_mainloop_with(main)

